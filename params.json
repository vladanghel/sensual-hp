{"name":"Reflect","body":"<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <title>Custom Environment Map</title>\r\n    <style>\r\n      html, body {\r\n        padding: 0;\r\n        margin: 0;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <script src=\"Three.js\"></script>\r\n    <script>\r\n\r\n      var SAMPLE = (function() {\r\n\r\n        // create and set up the scene, etc\r\n        var width = window.innerWidth;\r\n        var height = window.innerHeight;\r\n        var scene = new THREE.Scene();\r\n        var camera = new THREE.PerspectiveCamera(70, width / height, 1, 1500);\r\n\t//camera.position.x=100;\r\n\tcamera.position.y=100;\r\n\t//camera.position.z=100;\r\n        var renderer = new THREE.WebGLRenderer({antialias:true});\r\n        var time = 0;\r\n        var ORIGIN = new THREE.Vector3();\r\n\r\n        // urls of the images,\r\n        // one per half axis\r\n        var urls = [\r\n              'canary/pos-x.png',\r\n              'canary/neg-x.png',\r\n              'canary/pos-y.png',\r\n              'canary/neg-y.png',\r\n              'canary/pos-z.png',\r\n              'canary/neg-z.png'\r\n            ];\r\n\r\n        // wrap it up into the object that we need\r\n        var cubemap = THREE.ImageUtils.loadTextureCube(urls);\r\n\r\n        // set the format, likely RGB\r\n        // unless you've gone crazy\r\n        cubemap.format = THREE.RGBFormat;\r\n\r\n        // following code from https://github.com/mrdoob/three.js/blob/master/examples/webgl_materials_cubemap.html\r\n        var shader = THREE.ShaderUtils.lib[ \"cube\" ];\r\n        shader.uniforms[ \"tCube\" ].texture = cubemap;\r\n\r\n        var material = new THREE.ShaderMaterial( {\r\n\r\n          fragmentShader: shader.fragmentShader,\r\n          vertexShader: shader.vertexShader,\r\n          uniforms: shader.uniforms,\r\n          depthWrite: false\r\n\r\n        });\r\n\r\n        var skybox = new THREE.Mesh( new THREE.CubeGeometry( 1000, 1000, 1000 ), material );\r\n        skybox.flipSided = true;\r\n\r\n        var ambient = new THREE.AmbientLight( 0xffffff );\r\n        scene.add(ambient);\r\n\r\n        var pointLight = new THREE.PointLight( 0xffffff, 1 );\r\n        scene.add( pointLight );\r\n\t\r\n\tvar reflectionMaterial = new THREE.MeshBasicMaterial({\r\n          color: 0xcccccc,\r\n          envMap: cubemap\r\n        });\r\n        \r\n\t var loader = new THREE.ColladaLoader();\r\n\t//loader.options.convertUpAxis = true;\r\n    loader.load('hp.dae', function (result) {\r\n    result.scene.scale.set(25,25,25);\r\n    result.scene.position.x=-330;\r\n    result.scene.position.y=-300;\r\n    result.scene.position.z=-50;\r\n    \r\n    \r\n    function hl (o3d) {\r\n\r\n                var children = o3d.children,\r\n                    geometry = o3d.geometry;\r\n\r\n                for ( var i = 0, il = children.length; i < il; i++ ) {\r\n                    hl( children[ i ] );\r\n                }\r\n\r\n                if ( geometry ) o3d.material = reflectionMaterial;\r\n\r\n            }\r\n\r\n            hl( result.scene );\r\n    \r\n    scene.add(result.scene);\r\n    \r\n    \r\n\t\r\n\t\r\n});\r\n\r\n       \r\n        scene.add(camera);\r\n        scene.add(skybox);\r\n\r\n        renderer.setSize(width, height);\r\n        document.body.appendChild(renderer.domElement);\r\n\t\r\n\t\r\n\r\n\r\n        function animate() {\r\n\r\n        time += 0.005;\r\n\r\n         camera.position.x = Math.sin(time) * 600;\r\n         camera.position.z = Math.cos(time) * 600;\r\n          camera.lookAt(ORIGIN);\r\n\r\n          renderer.render(scene,camera);\r\n          requestAnimationFrame(animate);\r\n        }\r\n\r\n        requestAnimationFrame(animate);\r\n\r\n      })();\r\n    </script>\r\n  </body>\r\n</html>\r\n","tagline":"Reflect","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}